.TH SCRAM 1 LOCAL
.SH NAME
scram \- A Software Configuration, Release and Management tool which supports
configuration management and management processes for software development.
.SH SYNOPSIS
.B scram [options] <COMMANDS> [sub-commands] [command-options]
.SH DESCRIPTION
SCRAM is a software engineering tool, that supports the configuration management
and management processes for software development. It resolves the issues of
configuration definition, build, project organization and run-time environment.
It was designed with a focus on supporting a distributed, multi-project
development work-model
.##############################################################################
.SH OPTIONS
.TP 3
-a, --arch <arch>
Override the SCRAM_ARCH environment variable value.
.TP 3
-d, --debug
Turns on any debug output.
.TP 3
-h, --help
Shows the scram help message.
.SH SCRAM COMMANDS
.TP 0
.B Common Options
All scram commands recognize following options.
.TP 3
-h, --help
To show the help message for the selected command e.g.
.RS 3
.B scram list -h
.RE
.TP 0
.B COMMANDS
.##############################################################################
.COMMAND: scram arch
.TP 3
.B arch
Show the current architecture flag. If this command is run from a SCRAM-based
release/developer area then it shows the architecture for which that release
was created otherwise shows out the SCRAM_ARCH environment variable value.
.##############################################################################
.COMMAND: scram build
.TP 3
.B build [options] [gmake-options] [<targets>]
Build the productions (shared libraries, plugins, executables and tests) for the
current project area.
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-c, --convertxml
Obsolete: Convert any old-style BuildFile in to new BuildFile.xml
.TP 3
-f, --fast
Skip checking the internal SCRAM cache update and go straight to build/gamke
.TP 3
--ignore-arch
Avoid SCRAM warning about architecture mismatch e.g. compiling on SLC5 machine
an slc6_* based release.
.TP 3
-r, --reset
Reset/re-generate all internal SCRAM caches for your development area.
.TP 3
-t, --testrun
Do not run gmake but only do any internal SCRAM caches updates.
.TP 3
-v, --verbose
For more verbose output from the underlaying gmake process
.RE
.TP 3
.SS GMAKE OPTIONS
.RS 3
You can pass any gmake command-line option which does not conflicit with 'scram build'
options. e.g.
.TP 3
-j [N], --jobs[=N]
Allow N jobs at once; infinite jobs with missing N
.TP 3
-k, --keep-going
Keep going when some targets can't be made
.RE
.TP 3
.SS TARGETS
.RS 3
.TP 3
.B help
Shows what SCRAM will build for your current working directory.
.TP 3
.B clean
Clean up all the products built/generated by SCRAM.
.TP 3
.B python
To just build python i.e. creating sym-links and compiling python modules.
.TP 3
.B runtests
Build and run all tests for the project, or package-level tests only
.TP 3
.B unittests
Same as runtests but does not try to build the test first.
.TP 3
.B checker
Run LLVM static checkers
.TP 3
.B dxr
Generate DXR indexes for the release.
.TP 3
.B gindices
Generate glimpse indexes for the release.
.TP 3
.B enable-biglib disable-biglib check-biglib
Disable/enable/check big EDM plugins
.TP 3
.B updateclassversion
Run the edmCheckClassVersion and generate new src/<package>/classes_def.xml.generated file.
.TP 3
.B prebuild postbuild
Execute any pre/post-build target for the project e.g. generating various source file for
root/lcg dictionaries etc.
.TP 3
.B src release release-build all project
Build all products (shared libs, plugins, binaries) for the project
.TP 3
.B <path>
Build all products (shared libs, plugins, binaries) and their dependencies for src/<path>
.TP 3
.B runtime
Dump the runtime environment used at build time.
.TP 3
.B ProjectRename projectrename PROJECTRENAME
Fix the project area which was move/renamed after its creation.
.TP 3
.B ExternalLinks ToolUpdated
Re-create symblinks for externals tools.
.TP 3
.B echo_<tool|package>_USED_BY
Shows what depends on <tool> or <package> e.g.
.RS 6

.B scram build echo_boost_USED_BY
.RE
.RS 6
.B scram build echo_FWCore/Framework_USED_BY

.RE
.RS 3
should show what depend on boost and FWCore/Framework
.RE
.TP 3
.B echo_<tool|package>_USES
Shows what is the dependency of <tool> or <package>
.TP 3
.B echo_<productname>_ORIGIN
Shows from which package <productname> was built.
.TP 3
.B echo_<variable>
Shows the value of a variable used by the game e.g.
.RS 6

.B scram build echo_CXXFLAGS

.RE
.RS 3
shows the default flags used by the CXX compilers
.RE
.RE
.##############################################################################
.COMMAND: scram config
.TP 3
.B config [<parameter[=value]
Show/Set site specific parameters.Running it without any argument shows all
the available parameters and their values for your site.
.TP 3
.SS OPTIONS
.RS 3
.TP 3
<paramter>
Shows current and valid values for <paramter>.
.TP 3
<paramter>=<value>
Set new <value> for the <paramter>.

.RE
.RS 3
Supported site configuration parameters are
.RS 3
.TP 3
.B release-checks=1|0|yes|no
Enable/disable release checks e.g. production architectures, deprecated releases.
This avoids accessing releases information from internet. Default value is 1.
.TP 3
.B release-checks-timeout=[3-9]|[1-9][0-9]+
Time in seconds after which a request to get release information should be timed
out (min. value 3s). Default value is 10s.
.RE
.RE
.##############################################################################
.COMMAND: scram db
.TP 3
.B db --show|--link <path>|--unlink <path>
Show, link/add or unlink/remove additional SCRAM db. By adding an external
SCRAM db in your local scram db allows scram to let you create developers
area for projects/releases available in other cms installation. Your local
scram db is available under $CMS_PATH/etc/scramrc/links.db
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-l , --link <path>
Link/Add an external scram db <path> in to local scram db.
.TP 3
-s, --show
Show all the external databases linked in to your SCRAM db.
.TP 3
-u, --unlink <path>
Unlink/Remove an already linked external db <path> from the local scram db.
.RE
.##############################################################################
.COMMAND: scram list
.TP 3
.B list [options] [<project_name>] [<version>]
Show available SCRAM-based projects for the selected SCRAM_ARCH.
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-a, --all
Show projects for all available architectures.
.TP 3
-c --compact
Show project list in compact format. Output format of each line will be
.RS 6
.B ProjectName  Version  ReleaseInstallPath
.RE
.TP 3
-e, --exists
Show only projects will actually looks OK. Note, this might be slow on distributed
filesystems as SCRAM has to check each installed project and its version.
.TP 3
<project_name>
.B Optional:
Name of the project for which SCRAM should display the available versions.
.TP 3
<version>
.B Optional:
To Show only those installed versions which contain <version>
.RE
.##############################################################################
.COMMAND: scram project
.TP 3
.B project [options] <-boot bootstrap_file> | <project_name version> | <release_path>
Creates a project developer area based on a release area or a release area using
the project definition from the <bootstrap_file>. You can find the available
releases by running 'scram list' command.
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-d, --dir <path>
Indicate a project installation area into which the new project area should
appear. Default is the current working directory.
.TP 3
-f, --force
Force creation of developer area without checking for production architecture
and deprecated release information. This avoid accessing releases information
via internet.
.TP 3
-l, --log
See the detail log message while creating a dev area.
.TP 3
-n, --name <name>
Specify the name of the SCRAM-base development area you wish to create. By default
<version> is used.
.TP 3
-s, --symlinks
Creates symlinks for various product build directories e.g. lib/bin/tmp. You need
to have ~/.scramrc/symlinks file to configure the symlink creation e.g. something
like the following in the ~/.scramrc/symlinks file
.RS 3

.B lib:/tmp/$(USER)/path
.RE
.RS 3
.B tmp:/tmp/$(USER)/path

will create 

.B /tmp/$(USER)/path/lib.<dummyname> -> $(LOCALTOP)/lib
.RE
.RS 3
.B /tmp/$(USER)/path/tmp.<dummyname> -> $(LOCALTOP/tmp

You can use $(SCRAM_PROJECTNAME) and $(SCRAM_PROJECTVERSION) in the .scramrc/symlinks
file to create separate tmp areas for different projects.
.RE
.TP 3
-b, --boot <bootstrap_file>
Creates a release area using the bootstrap file <bootstrap_file>.
.TP 3
[<project_name>] <version>
Creates a developer area based on an already available release <version>.
.TP 3
<release_path>
Creates a developer area based on <release_path> release area.
.RE
.##############################################################################
.COMMAND: scram runtime
.TP 3
.B runtime -csh|-sh|-win [--dump <file>]
Shows the list of shell commands needed to set the runtime environment for the
release. This command needs to be run from a release or developer area. You can
eval the output of this command to set the runtime environment e.g.
.B eval `scram runtime -sh`
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-csh
Show runtime commands for csh/tcsh shell.
.TP 3
-sh
Show runtime commands for sh/bash/zsh shell.
.TP 3
-win
Show runtime commands for cygwin.
.TP 3
--dump <file>
.B Optional:
Save the runtime environment in a <file> for the selected shell.
.RE
.##############################################################################
.COMMAND: scram setup
.TP 3
.B setup [<toolname>|<toolfile>.xml]
Setup/add an external tool to be used by the project. All selected tools
definitions exists in config/toolbox/$SCRAM_ARCH/tools/selected directory
in your project area. In order to change the tool definition, modify the
corresponding xml toolfile and run scram setup <tool> command.
.RS 3

This command needs to be run from a release or developer area.
.RE
.TP 3
.SS OPTIONS
.RS 3
.TP 3
<toolname>
Name of the external tool which is already by the scram. A corresponding
<toolname>.xml should exists under config/toolbox/$SCRAM_ARCH/tools.
.TP 3
<toolfile>.xml
Full path of the toolfile. SCRAM will make a copy of <toolfile>.xml in to
config/toolbox/$SCRAM_ARCH/tools for future use.
.RE
.##############################################################################
.COMMAND: scram tool
.TP 3
.B tool
This command consists of many sub-commands which deals with externals tools. This
command needs to be run from a release or developer area.
.##############################################################################
.COMMAND: scram tool list
.TP 3
.B tool list
Shows the list of all selected tools names and their versions.
.##############################################################################
.COMMAND: scram tool info
.TP 3
.B tool info <toolname>
Shows the current tool definition for tool <toolname>.
.##############################################################################
.COMMAND: scram tool remove
.TP 3
.B tool remove <toolname>
Makes the tool <toolname> unavailable. SCRAM moves the tools definition file
from config/toolbox/$SCRAM_ARCH/tools/selected/<toolname>.xml to
config/toolbox/$SCRAM_ARCH/tools/available directory. So if one needs to select
this tool again then just run 'scram setup <toolname>' command.
.##############################################################################
.COMMAND: scram tool tag
.TP 3
.B tool tag <toolname> <tag_name>
Shows the value of a variable(tag_name) for the <toolname> e.g.
.RS 6

.B scram tool tag gcc-cxxcompiler CXX

.RE
.RS 3
shows the c++ compiler's path.
.RE
.##############################################################################
.COMMAND: scram unsetenv
.TP 3
.B unsetenv -csh|-sh|-win
Shows the list of shell commands needed to unset the runtime environment set
previously by 'scram runtime command'. You can eval the output of this command
to cleanup your previously set scram environment e.g.
.B eval `scram unsetenv -sh`
.TP 3
.SS OPTIONS
.RS 3
.TP 3
-csh
Show unset commands for csh/tcsh shell.
.TP 3
-sh
Show unset commands for sh/bash/zsh shell.
.TP 3
-win
Show unset commands for cygwin.
.RE
.##############################################################################
.COMMAND: scram version
.TP 3
.B version
Show default version of SCRAM. If this command is run from a SCRAM-based
release/developer area then it shows the latest available version of SCRAM available
for that release.
.##############################################################################
.SH SCRAM FLAGS
SCRAM-based projects' build rules provided via cmssw-config support many
compilation/control flags. Scope of build/compilation flag are defined
by the place they are defined in. e.g.
.RS 3
.TP 3
.B Project level flags
Any flag defined/provided via following are used for all build products of the project
.RS 3
.B - top-level config/BuildFile.xml
.RE
.RS 3
.B - compiler's tools files (e.g. gcc-cxxcompiler.xml, gcc-cxxcompiler.xml and gcc-f77compiler.xml)
.RE
.RS 3
.B - via command-line USER_<flag>/SCRAM_<flag>
.RE
.TP 3
.B Tool level flags
Any flags defined in the tool file of an external are used for all the build
products which directly or indirectly depends on that tool.
.TP 3
.B Product level flags
Any flags defined in the BuildFile.xml is used by the product(s) defined in that
BuildFile.xml

.RE
Some flags (<class>[_REM]_<flag) can be configured based on their product class
e.g. available classes are
.RS 3
.B LIBRARY
.RS 3
For all shared library/edm plugin/edm capabilities plugin products
.RE
.B BINARY
.RS 3
For all executables.
.RE
.B TEST
.RS 3
For all test executables.
.RE
.B TEST_LIBRARY
.RS 3
For all test shared libraires executables.
.RE
.RE

Some flags (<type>[_REM]_<flag>) can be configured based on the SCRAM-based area types
e.g. available area types are
.RS 3
.B RELEASE
.RS 3
Only for compilation/build in the release area environment.
.RE
.B DEV
.RS 3
Only for compilation/build user development area.
.RE
.RE
.##############################################################################
.SH SCRAM BUILD FLAGS
SCRAM sets variuos flags to be used by different compilers (e.g CXX, C
and Fortran)
.TP 3
.B [<class|type>_][REM_]<CXX|C|F>FLAGS
Compilation flags for CXX/C/Fortran compilers.
.TP 3
.B [<class|type>_][REM_]CPPFLAGS
Pre-processor flags for pre-processing.
.TP 3
.B [<class|type>_][REM_]CPPDEFINES
Pre-processor macros, SCRAM adds -D for each of these flags.
.TP 3
.B [<class|type>_][REM_]LDFLAGS
Link flags for linking shared libraries or building executables.
.TP 3
.B [CXX|C|F]OPTIMISEDFLAGS
Optiomization flags for CXX/C/Fortran
.TP 3
.B [CXX|C|F]CXXSHAREDOBJECTFLAGS
Shared object flags for CXX/C/Fortran
.TP 3
.B [REM_]CUDA_FLAGS
Compilation flags for CUDA compiler.
.TP 3
.B [REM_]CUDA_CFLAGS
Compilation flags for CUDA compiler which should passes via --compiler-options.
.TP 3
.B [<class>_][REM_]<EDM|CAPABILITIES>_<CPPFLAGS|CXXFLAGS|CFLAGS>
Compilation flags for EDM/Capabilities Plugin compilation
.TP 3
.B [<class>_][REM_]EDM_LDFLAGS
Link flags for EDM Plugin linking.
.TP 3
.B [REM_]LCGDICT_LDFLAGS
Link flags for EDM Capabilities Plugin linking.
.TP 3
.B [<class>_][REM_]<LCG|ROOT>DICT_<CPPFLAGS|CXXFLAGS>
Compilation flags to compile generated lcg/root dictionary files.
.TP 3
.B LD_UNIT
Flags used for the generation of big object file for big plugins.
.TP 3
.B MISSING_SYMBOL_FLAGS
Link flags used for linking to make sure there are no missing symbols.
.TP 3
.B BIGOBJ_[REM_]<CPPFLAGS|CXXFLAGS|CFLAGS|FFLAGS|LDFLAGS>
Various compilation/link flags for Big Plugins.
.TP 3
.B GENREFLEX_ARGS
Flags/arguments for genreflex
.TP 3
.B GENREFLEX_GCCXMLOPT
GCCXML options passed to genreflex
.TP 3
.B GENREFLEX_CPPFLAGS
Pre-processor flags pass to genreflex
.SH SCRAM CONTROL FLAGS
There are few control flags which one can add in to Buildfile.xml to control
scram build process e.g.
.TP 3
.B <export><lib="1"/></export>
This makes a shared library generated form <package>/BuildFile.xml linkable.
.TP 3
.B RIVET_PLUGIN=1|0
To tell SCRAM to generate a RIVET Plugin instead of a shared library. Default value
is 0.
.TP 3
.B EDM_PLUGIN=1|0
To tell SCRAM to generate a EDM Plugin instead of a shared library. Default value
is 1 for <package>/<plugins>/BuildFile.xml and 0 for all otherBuildFile.xml
.TP 3
.B ADD_SUBDIR=1|0
To tell SCRAM to search for source files in all sub-directories pf <package>/src.
Default value is 0 i.e. scram only looks for source files (c, cc, cpp, ccx) in
<package>/src directory
.TP 3
.B NO_LIB_CHECKING=1|0
To tell SCRAM to not check the generated shared library/edm plugin for missing symbols.
Default value is 0.
.TP 3
.B LCG_DICT_HEADER=<files>
Space separated list of classes.h files for LCG dictionaries. Default value is classes.h
.TP 3
.B LCG_DICT_XML=<files>
Space separated list of classes_def.xml files for LCG dictionaries. Default value is classes_def.xml
.TP 3
.B ROOTMAP=1|0
Generate .rootmap file too. Default value is 0
.TP 3
.B GENREFLEX_FAILES_ON_WARNS=1|0
To tell scram to fail on genreflex warnings. Default value is 0.
.TP 3
.B SKIP_FILES=<files>
Space separated list of source files which should not be considered for compilation.
.TP 3
.B INSTALL_SCRIPTS=<files>
Space separated list of scripts which should be copied to bin/<arch> product store.
.TP 3
.B NO_TESTRUN=1|0
To avoid running the unit test via "scram build runtests".
This flag is only valid in <package>/test/BuildFile.xml
.TP 3
.B TEST_RUNNER_ARGS=<options>
Command-line arguments to be passed to the test when test is run via "scram build runtests"
This flag is only valid in <package>/test/BuildFile.xml
.TP 3
.B TEST_RUNNER_CMD=<command>
The command to run the test via "scram build runtests"
This flag is only valid in <package>/test/BuildFile.xml
.TP 3
.B PRE_TEST=<test>
Tests which should be run first before run this test.
This flag is only valid in <package>/test/BuildFile.xml
.TP 3
.B DROP_DEP=<dependency>
For Big EDM Plugins, to drop any direct or indirect dependnecy used by the packages
of Big Plugin.
.TP 3
.B LLVM_PLUGIN
Name of the static analyzer plugin for LLVM Static Analysis. Effective only in
config/BuildFile.xml.
.TP 3
.B LLVM_CHECKERS
Default checkers to be enbabled for LLVM Static Analysis. Effective only in
config/BuildFile.xml.
.TP 3
.B <library name="<name>" file="<files>">[dependencies/flags]</library>
To generate a shared library from a <packages>/[plugins|test|bin] directory.
.RS 3 

By default, SCRAM generates shared library for <package>/src directory so no
need to use <library> tag in <package>/BuildFile.xml.
.RE
.RS 3
By default, all shared libraries generated from <packages>/plugins are EMD Plugins.
unless explicitly turned off by <flags EDM_PLUGIN="0"/>
.RE
.TP 3
.B <bin name="<name>" file="<files>">[dependencies/flags]</bin>
To generate an executable/test executable from a <packages>/[plugins|test|bin] directory.
.TP 3
.B <test name="<name>" command="<command-to-run>">[dependencies/flags]</test>
To run the command for the test in <package>/test directory.
.TP 3
.B <architecture name="[!]<regexp>"/></architecture>
Any flag/dependency within an architecture block will apply if regexp matches
SCRAM_ARCH. If first charactor of regexp is '!' then flags/dependency will apply
if rexexp does not match SCRAM_ARCH.
.RS 3

Nasted architecture blocks are allowed.
.RE

.TP 3
.B <compiler name="[!]<regexp>"/></compiler>
Any flag/dependency within compiler tag will apply if regexp matches the default
compiler. If first charactor of regexp is '!' then flags/dependency will apply
if regexp does not match the default compiler.
.RS 3

Default compiler is set via config/Self.xml file.
.RE
.RS 3
Nasted compiler blocks are allowed.
.RE
.##############################################################################
.SS CONTROL FLAGS (via environment)
There are few environment flags that can control SCRAM e.g.
.TP 3
.B USER_[BIGOBJ_][REM_]<CPPFLAGS|CXXFLAGS|CFLAGS|FFLAGS|LDFLAGS>
Various user defined compilation/link flags.
.TP 3
.B USER_LLVM_CHECKERS
Used defined extra checkers to be enabled for LLVM Static Analysis.
.TP 3
.B SCRAM_USERLOOKUPDB=<path>
To instruct SCRAM to use <path> as its database and look for projects under this directory.
.TP 3
.B RUN_LLVM_ANALYZER_ON_ALL=yes
To run llvm analyzer on generated code too. By default it does not run on generated code.
.TP 3
.B BUILD_LOG=yes
To redirect the "scram build -j n" output to log files for each product.
.TP 3
.B SCRAM_NOEDMWRITECONFIG=1
No to run EDM Write Config script after the edmplugin build.
.TP 3
.B SCRAM_IGNORE_PACKAGES=<packages>
Do not build <packages>
.TP 3
.B SCRAM_IGNORE_SUBDIRS=<sub-dirs>
Do not build <sub-dirs> of each package e.g. one can set it to test to avoid building
test executables/plugins.
.TP 3
.B SKIP_UNITTESTS=<tests>
Do not run these <tests> when "scram build runtests|unittests" is run.
.TP 3
.B SCRAM_NOSYMCHECK=1
Do not run any extra shared library missing symbols checks.
.TP 3
.B SCRAM_TEST_RUNNER_PREFIX=<command>
Prefix each unittest with <command> before running.
